// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>
#include "typedefs.h"

using namespace Rcpp;

// C_iterate
NumericMatrix C_iterate(dblList dx, dblList dminxy, double Sx_base, double Sy, bool verbose);
RcppExport SEXP _cnaOpt_C_iterate(SEXP dxSEXP, SEXP dminxySEXP, SEXP Sx_baseSEXP, SEXP SySEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< dblList >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< dblList >::type dminxy(dminxySEXP);
    Rcpp::traits::input_parameter< double >::type Sx_base(Sx_baseSEXP);
    Rcpp::traits::input_parameter< double >::type Sy(SySEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(C_iterate(dx, dminxy, Sx_base, Sy, verbose));
    return rcpp_result_gen;
END_RCPP
}
// C_m_intersects_with_all
LogicalVector C_m_intersects_with_all(charList x, charList y);
RcppExport SEXP _cnaOpt_C_m_intersects_with_all(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< charList >::type x(xSEXP);
    Rcpp::traits::input_parameter< charList >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(C_m_intersects_with_all(x, y));
    return rcpp_result_gen;
END_RCPP
}
// C_m_contains_one_of
LogicalVector C_m_contains_one_of(charList x, charList y);
RcppExport SEXP _cnaOpt_C_m_contains_one_of(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< charList >::type x(xSEXP);
    Rcpp::traits::input_parameter< charList >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(C_m_contains_one_of(x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cnaOpt_C_iterate", (DL_FUNC) &_cnaOpt_C_iterate, 5},
    {"_cnaOpt_C_m_intersects_with_all", (DL_FUNC) &_cnaOpt_C_m_intersects_with_all, 2},
    {"_cnaOpt_C_m_contains_one_of", (DL_FUNC) &_cnaOpt_C_m_contains_one_of, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cnaOpt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
